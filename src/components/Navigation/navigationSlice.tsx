import { createAsyncThunk, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState, AppThunk } from "../../app/store";
import { fetchTheme } from "./navigationApi";

type Main = "red" | "green" | "blue";
export type MainObj = { main: Main };
type Light = "light-red" | "light-green" | "light-blue";
type Medium = "medium-red" | "medium-green" | "medium-blue";
type Hard = "hard-red" | "hard-green" | "hard-blue";
type Button = "button-red" | "button-green" | "button-blue";
type Glass = "glassFilter" | "";
export type GlassObj = { glass: Glass };

interface Theme {
  main: Main;
  light: Light;
  medium: Medium;
  hard: Hard;
  glass: Glass;
  button: Button;
}

export interface NavigationState {
  theme: Theme;
  status: "idle" | "loading" | "failed";
}

const initialState: NavigationState = {
  theme: {
    main: "blue",
    light: "light-blue",
    medium: "medium-blue",
    hard: "hard-blue",
    button: "button-blue",
    glass: "",
  },
  status: "idle",
};

export const ALL_THEMES = {
  red: "red",
  green: "green",
  blue: "blue",
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk("navigation/fetchTheme", async (theme: string) => {
  const response = await fetchTheme(theme);
  // The value we return becomes the `fulfilled` action payload
  return response.data;
});

export const navigationSlice = createSlice({
  name: "navigation",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setTheme: (state, action: PayloadAction<{ main: Main }>) => {
      const theme = action.payload.main;
      let newThemeObj: Theme = {
        main: theme,
        light: `light-${theme}`,
        medium: `medium-${theme}`,
        hard: `hard-${theme}`,
        button: `button-${theme}`,
        glass: state.theme.glass,
      };

      state.theme = newThemeObj;
    },

    setStyle: (state, action: PayloadAction<{ glass: Glass }>) => {
      let glass: Glass = "";

      if (!state.theme.glass) glass = "glassFilter";

      state.theme.glass = glass;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = "loading";
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = "idle";
        //state.value += action.payload;
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = "failed";
      });
  },
});

export const { setTheme, setStyle } = navigationSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectTheme = (state: RootState) => state.navigation.theme;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd =
//   (amount: number): AppThunk =>
//   (dispatch, getState) => {
//     const currentValue = selectTheme(getState());
//     if (currentValue % 2 === 1) {
//       dispatch(incrementByAmount(amount));
//     }
//   };

export default navigationSlice.reducer;
